// Generated by CoffeeScript 1.7.1
(function() {
  var ViewModel, groupby,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  groupby = function(array, accessor) {
    var item, items, key, map, result, _i, _len;
    map = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      key = accessor(item);
      if (map[key] == null) {
        map[key] = [];
      }
      map[key].push(item);
    }
    result = [];
    for (key in map) {
      items = map[key];
      result.push({
        key: key,
        items: items
      });
    }
    return result;
  };

  ViewModel = (function() {
    function ViewModel() {
      this.click = __bind(this.click, this);
      this.query = __bind(this.query, this);
      this.results = ko.observableArray([]);
    }

    ViewModel.prototype.query = function() {
      return $.get('api', (function(_this) {
        return function(results) {
          var result, _i, _len, _results;
          _this.results.removeAll();
          results = groupby(results, function(r) {
            return r.name;
          });
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            _results.push(_this.results.push({
              key: result.key,
              items: groupby(result.items, function(r) {
                return r.check;
              })
            }));
          }
          return _results;
        };
      })(this));
    };

    ViewModel.prototype.click = function(check) {
      return alert(check.message);
    };

    return ViewModel;

  })();

  $(function() {
    var vm;
    vm = new ViewModel;
    ko.applyBindings(vm);
    return vm.query();
  });

}).call(this);
